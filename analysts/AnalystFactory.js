/**
 * AnalystFactory - Factory pattern ƒë·ªÉ qu·∫£n l√Ω c√°c lo·∫°i analyst kh√°c nhau
 * S·ª≠ d·ª•ng HashMap ƒë·ªÉ l∆∞u tr·ªØ v√† truy xu·∫•t c√°c analyst
 */

class AnalystFactory {
    constructor() {
        // HashMap ƒë·ªÉ l∆∞u tr·ªØ c√°c analyst
        this.analysts = new Map();
        this.initializeAnalysts();
    }

    /**
     * Kh·ªüi t·∫°o c√°c analyst c√≥ s·∫µn
     */
    initializeAnalysts() {
        const MetontiimeAnalyst = require('./MetontiimeAnalyst');
        
        // ƒêƒÉng k√Ω MetONTIIME analyst (primary)
        this.registerAnalyst('metontiime', new MetontiimeAnalyst());
        
        // ƒêƒÉng k√Ω Example analyst (optional - for demo/development)
        try {
            const ExampleAnalyst = require('./ExampleAnalyst');
            this.registerAnalyst('example', new ExampleAnalyst());
            console.log('üìä Example analyst registered (demo mode)');
        } catch (error) {
            console.log('‚ÑπÔ∏è Example analyst not available (production mode)');
        }
        
        console.log('‚úÖ AnalystFactory initialized with analysts:', Array.from(this.analysts.keys()));
    }

    /**
     * ƒêƒÉng k√Ω m·ªôt analyst m·ªõi
     * @param {string} name - T√™n c·ªßa analyst
     * @param {object} analyst - Instance c·ªßa analyst
     */
    registerAnalyst(name, analyst) {
        if (!analyst.analyze || typeof analyst.analyze !== 'function') {
            throw new Error(`Analyst ${name} must implement analyze() method`);
        }
        
        if (!analyst.getRequiredInputs || typeof analyst.getRequiredInputs !== 'function') {
            throw new Error(`Analyst ${name} must implement getRequiredInputs() method`);
        }

        if (!analyst.getSupportedDatabases || typeof analyst.getSupportedDatabases !== 'function') {
            throw new Error(`Analyst ${name} must implement getSupportedDatabases() method`);
        }

        this.analysts.set(name.toLowerCase(), analyst);
        console.log(`üìä Registered analyst: ${name}`);
    }

    /**
     * L·∫•y analyst theo t√™n
     * @param {string} name - T√™n analyst
     * @returns {object|null} - Instance c·ªßa analyst ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    getAnalyst(name) {
        return this.analysts.get(name.toLowerCase()) || null;
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ analyst c√≥ s·∫µn
     * @returns {Array} - Danh s√°ch t√™n c√°c analyst
     */
    getAvailableAnalysts() {
        return Array.from(this.analysts.keys());
    }

    /**
     * Ki·ªÉm tra xem analyst c√≥ t·ªìn t·∫°i kh√¥ng
     * @param {string} name - T√™n analyst
     * @returns {boolean}
     */
    hasAnalyst(name) {
        return this.analysts.has(name.toLowerCase());
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ analyst
     * @param {string} name - T√™n analyst
     * @returns {object|null} - Th√¥ng tin analyst
     */
    getAnalystInfo(name) {
        const analyst = this.getAnalyst(name);
        if (!analyst) return null;

        return {
            name: name,
            description: analyst.description || 'No description available',
            requiredInputs: analyst.getRequiredInputs(),
            supportedDatabases: analyst.getSupportedDatabases(),
            version: analyst.version || '1.0.0'
        };
    }

    /**
     * L·∫•y th√¥ng tin t·∫•t c·∫£ analyst
     * @returns {Array} - Danh s√°ch th√¥ng tin c√°c analyst
     */
    getAllAnalystsInfo() {
        const analystsInfo = [];
        
        for (const [name, analyst] of this.analysts) {
            analystsInfo.push({
                name: name,
                description: analyst.description || 'No description available',
                requiredInputs: analyst.getRequiredInputs(),
                supportedDatabases: analyst.getSupportedDatabases(),
                version: analyst.version || '1.0.0'
            });
        }
        
        return analystsInfo;
    }

    /**
     * Ch·∫°y ph√¢n t√≠ch v·ªõi analyst ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
     * @param {string} analystName - T√™n analyst
     * @param {object} params - Tham s·ªë cho ph√¢n t√≠ch
     * @returns {Promise} - Promise c·ªßa k·∫øt qu·∫£ ph√¢n t√≠ch
     */
    async runAnalysis(analystName, params) {
        const analyst = this.getAnalyst(analystName);
        if (!analyst) {
            throw new Error(`Analyst ${analystName} not found`);
        }

        console.log(`üî¨ Running analysis with ${analystName} analyst...`);
        return await analyst.analyze(params);
    }
}

module.exports = AnalystFactory;
